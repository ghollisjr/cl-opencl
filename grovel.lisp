(pkg-config-cflags "OpenCL" :optional t)
(include "CL/opencl.h")

(in-package #:cl-opencl-cffi)

;; basic types
(ctype size-t "size_t")
;; vector half types didn't work, maybe this does?
(ctype cl-half "cl_half")

;;; CL/cl.h

(progn
  (ctype cl-platform-id "cl_platform_id")
  (ctype cl-device-id "cl_device_id")
  (ctype cl-context "cl_context")
  (ctype cl-command-queue "cl_command_queue")
  (ctype cl-mem "cl_mem")
  (ctype cl-program "cl_program")
  (ctype cl-kernel "cl_kernel")
  (ctype cl-event "cl_event")
  (ctype cl-sampler "cl_sampler"))

(progn
  (ctype cl-bool "cl_bool")
  (ctype cl-device-type "cl_device_type")
  (ctype cl-platform-info "cl_platform_info")
  (ctype cl-device-info "cl_device_info")
  (ctype cl-device-fp-config "cl_device_fp_config")
  (ctype cl-device-mem-cache-type "cl_device_mem_cache_type")
  (ctype cl-device-local-mem-type "cl_device_local_mem_type")
  (ctype cl-device-exec-capabilities "cl_device_exec_capabilities")
  ;; version 2.0
  (progn
    (ctype cl-device-svm-capabilities "cl_device_svm_capabilities "))
  (ctype cl-command-queue-properties "cl_command_queue_properties")
  ;; version 1.2
  (progn
    (ctype cl-device-partition-property "cl_device_partition_property")
    (ctype cl-device-affinity-domain "cl_device_affinity_domain"))
  (ctype cl-context-properties "cl_context_properties")
  (ctype cl-context-info "cl_context_info")
  ;; version 2.0
  (progn
    (ctype cl-queue-properties "cl_queue_properties"))
  (ctype cl-command-queue-info "cl_command_queue_info")
  (ctype cl-channel-order "cl_channel_order")
  (ctype cl-channel-type "cl_channel_type")
  (ctype cl-mem-flags "cl_mem_flags")
  ;; version 2.0
  (progn
    (ctype cl-svm-mem-flags "cl_svm_mem_flags"))
  (ctype cl-mem-object-type "cl_mem_object_type")
  (ctype cl-mem-info "cl_mem_info")
  ;; version 1.2
  (progn
    (ctype cl-mem-migration-flags "cl_mem_migration_flags"))
  (ctype cl-image-info "cl_image_info")
  (ctype cl-buffer-create-type "cl_buffer_create_type")
  ;; version 1.1
  (progn
    (ctype cl-buffer-create-type "cl_buffer_create_type"))
  (ctype cl-addressing-mode "cl_addressing_mode")
  (ctype cl-filter-mode "cl_filter_mode")
  (ctype cl-sampler-info "cl_sampler_info")
  (ctype cl-map-flags "cl_map_flags")
  ;; version 2.0
  (progn
    (ctype cl-pipe-properties "cl_pipe_properties")
    (ctype cl-pipe-info "cl_pipe_info"))
  (ctype cl-program-info "cl_program_info")
  (ctype cl-program-build-info "cl_program_build_info")
  ;; version 1.2
  (progn
    (ctype cl-program-binary-type "cl_program_binary_type"))
  (ctype cl-build-status "cl_build_status")
  (ctype cl-kernel-info "cl_kernel_info")
  ;; version 1.2
  (progn
    (ctype cl-kernel-arg-info "cl_kernel_arg_info")
    (ctype cl-kernel-arg-address-qualifier "cl_kernel_arg_address_qualifier")
    (ctype cl-kernel-arg-access-qualifier "cl_kernel_arg_access_qualifier")
    (ctype cl-kernel-arg-type-qualifier "cl_kernel_arg_type_qualifier"))
  (ctype cl-kernel-work-group-info "cl_kernel_work_group_info")
  ;; version 2.1
  (progn
    (ctype cl-kernel-sub-group-info "cl_kernel_sub_group_info"))
  (ctype cl-event-info "cl_event_info")
  (ctype cl-command-type "cl_command_type")
  (ctype cl-profiling-info "cl_profiling_info")
  ;; version 2.0
  (progn
    (ctype cl-sampler-properties "cl_sampler_properties")
    (ctype cl-kernel-exec-info "cl_kernel_exec_info"))
  ;; experimental
  ;; (progn
  ;;   (ctype cl-device-atomic-capabilities "cl_device_atomic_capabilities")
  ;;   (ctype cl-mem-properties "cl_mem_properties")
  ;;   (ctype cl-khronos-vendor-id "cl_khronos_vendor_id")
  ;;   (ctype cl-version "cl_version"))
  )

;; images
(cstruct cl-image-format "cl_image_format"
         (image-channel-order "image_channel_order" :type cl-channel-order)
         (image-channel-data-type "image_channel_data_type" :type cl-channel-type))

(cstruct cl-image-desc "cl_image_desc"
         (image-type "image_type" :type cl-mem-object-type)
         (image-width "image_width" :type size-t)
         (image-height "image_height" :type size-t)
         (image-depth "image_depth" :type size-t)
         (image-array-size "image_array_size" :type size-t)
         (image-row-pitch "image_row_pitch" :type size-t)
         (image-slice-pitch "image_slice_pitch" :type size-t)
         (num-mip-levels "num_mip_levels" :type cl-uint)
         (num-samples "num_samples" :type cl-uint))

(cstruct cl-buffer-region "cl_buffer_region"
         (origin "origin" :type size-t)
         (size "size" :type size-t))

;; experimental
;; (progn
;;   (constant (+CL-NAME-VERSION-MAX-NAME-SIZE+
;;              "CL_NAME_VERSION_MAX_NAME_SIZE"))
;;   (cstruct cl-name-version "cl_name_version"
;;            (version "version" :type cl-version)
;;            (name "name" :type char
;;                  :count +CL-NAME-VERSION-MAX-NAME-SIZE+)))

;; Error Codes
(progn
  (constant (+CL-SUCCESS+ "CL_SUCCESS"))
  (constant (+CL-DEVICE-NOT-FOUND+ "CL_DEVICE_NOT_FOUND"))
  (constant (+CL-DEVICE-NOT-AVAILABLE+ "CL_DEVICE_NOT_AVAILABLE"))
  (constant (+CL-COMPILER-NOT-AVAILABLE+ "CL_COMPILER_NOT_AVAILABLE"))
  (constant (+CL-MEM_OBJECT-ALLOCATION-FAILURE+ "CL_MEM_OBJECT_ALLOCATION_FAILURE"))
  (constant (+CL-OUT-OF-RESOURCES+ "CL_OUT_OF_RESOURCES"))
  (constant (+CL-OUT-OF-HOST-MEMORY+ "CL_OUT_OF_HOST_MEMORY"))
  (constant (+CL-PROFILING-INFO-NOT-AVAILABLE+ "CL_PROFILING_INFO_NOT_AVAILABLE"))
  (constant (+CL-MEM-COPY-OVERLAP+ "CL_MEM_COPY_OVERLAP"))
  (constant (+CL-IMAGE-FORMAT-MISMATCH+ "CL_IMAGE_FORMAT_MISMATCH"))
  (constant (+CL-IMAGE-FORMAT-NOT_SUPPORTED+ "CL_IMAGE_FORMAT_NOT_SUPPORTED"))
  (constant (+CL-BUILD-PROGRAM-FAILURE+ "CL_BUILD_PROGRAM_FAILURE"))
  (constant (+CL-MAP-FAILURE+ "CL_MAP_FAILURE"))
  (constant (+CL-MISALIGNED-SUB-BUFFER-OFFSET+ "CL_MISALIGNED_SUB_BUFFER_OFFSET"))
  (constant (+CL-EXEC-STATUS-ERROR-FOR-EVENTS-IN-WAIT-LIST+ "CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST"))
  (constant (+CL-COMPILE-PROGRAM-FAILURE+ "CL_COMPILE_PROGRAM_FAILURE"))
  (constant (+CL-LINKER-NOT-AVAILABLE+ "CL_LINKER_NOT_AVAILABLE"))
  (constant (+CL-LINK-PROGRAM-FAILURE+ "CL_LINK_PROGRAM_FAILURE"))
  (constant (+CL-DEVICE-PARTITION-FAILED+ "CL_DEVICE_PARTITION_FAILED"))
  (constant (+CL-KERNEL-ARG-INFO-NOT-AVAILABLE+ "CL_KERNEL_ARG_INFO_NOT_AVAILABLE")))

;; constants
(progn
  (constant (+CL-INVALID-VALUE+ "CL_INVALID_VALUE"))
  (constant (+CL-INVALID-DEVICE-TYPE+ "CL_INVALID_DEVICE_TYPE"))
  (constant (+CL-INVALID-PLATFORM+ "CL_INVALID_PLATFORM"))
  (constant (+CL-INVALID-DEVICE+ "CL_INVALID_DEVICE"))
  (constant (+CL-INVALID-CONTEXT+ "CL_INVALID_CONTEXT"))
  (constant (+CL-INVALID-QUEUE-PROPERTIES+ "CL_INVALID_QUEUE_PROPERTIES"))
  (constant (+CL-INVALID-COMMAND-QUEUE+ "CL_INVALID_COMMAND_QUEUE"))
  (constant (+CL-INVALID-HOST-PTR+ "CL_INVALID_HOST_PTR"))
  (constant (+CL-INVALID-MEM-OBJECT+ "CL_INVALID_MEM_OBJECT"))
  (constant (+CL-INVALID-IMAGE-FORMAT-DESCRIPTOR+ "CL_INVALID_IMAGE_FORMAT_DESCRIPTOR"))
  (constant (+CL-INVALID-IMAGE-SIZE+ "CL_INVALID_IMAGE_SIZE"))
  (constant (+CL-INVALID-SAMPLER+ "CL_INVALID_SAMPLER"))
  (constant (+CL-INVALID-BINARY+ "CL_INVALID_BINARY"))
  (constant (+CL-INVALID-BUILD-OPTIONS+ "CL_INVALID_BUILD_OPTIONS"))
  (constant (+CL-INVALID-PROGRAM+ "CL_INVALID_PROGRAM"))
  (constant (+CL-INVALID-PROGRAM-EXECUTABLE+ "CL_INVALID_PROGRAM_EXECUTABLE"))
  (constant (+CL-INVALID-KERNEL-NAME+ "CL_INVALID_KERNEL_NAME"))
  (constant (+CL-INVALID-KERNEL-DEFINITION+ "CL_INVALID_KERNEL_DEFINITION"))
  (constant (+CL-INVALID-KERNEL+ "CL_INVALID_KERNEL"))
  (constant (+CL-INVALID-ARG-INDEX+ "CL_INVALID_ARG_INDEX"))
  (constant (+CL-INVALID-ARG-VALUE+ "CL_INVALID_ARG_VALUE"))
  (constant (+CL-INVALID-ARG-SIZE+ "CL_INVALID_ARG_SIZE"))
  (constant (+CL-INVALID-KERNEL-ARGS+ "CL_INVALID_KERNEL_ARGS"))
  (constant (+CL-INVALID-WORK-DIMENSION+ "CL_INVALID_WORK_DIMENSION"))
  (constant (+CL-INVALID-WORK-GROUP-SIZE+ "CL_INVALID_WORK_GROUP_SIZE"))
  (constant (+CL-INVALID-WORK-ITEM-SIZE+ "CL_INVALID_WORK_ITEM_SIZE"))
  (constant (+CL-INVALID-GLOBAL-OFFSET+ "CL_INVALID_GLOBAL_OFFSET"))
  (constant (+CL-INVALID-EVENT-WAIT-LIST+ "CL_INVALID_EVENT_WAIT_LIST"))
  (constant (+CL-INVALID-EVENT+ "CL_INVALID_EVENT"))
  (constant (+CL-INVALID-OPERATION+ "CL_INVALID_OPERATION"))
  (constant (+CL-INVALID-GL-OBJECT+ "CL_INVALID_GL_OBJECT"))
  (constant (+CL-INVALID-BUFFER-SIZE+ "CL_INVALID_BUFFER_SIZE"))
  (constant (+CL-INVALID-MIP-LEVEL+ "CL_INVALID_MIP_LEVEL"))
  (constant (+CL-INVALID-GLOBAL-WORK-SIZE+ "CL_INVALID_GLOBAL_WORK_SIZE"))
  (constant (+CL-INVALID-PROPERTY+ "CL_INVALID_PROPERTY"))
  (constant (+CL-INVALID-IMAGE-DESCRIPTOR+ "CL_INVALID_IMAGE_DESCRIPTOR"))
  (constant (+CL-INVALID-COMPILER-OPTIONS+ "CL_INVALID_COMPILER_OPTIONS"))
  (constant (+CL-INVALID-LINKER-OPTIONS+ "CL_INVALID_LINKER_OPTIONS"))
  (constant (+CL-INVALID-DEVICE-PARTITION-COUNT+ "CL_INVALID_DEVICE_PARTITION_COUNT"))
  (constant (+CL-INVALID-PIPE-SIZE+ "CL_INVALID_PIPE_SIZE"))
  (constant (+CL-INVALID-DEVICE-QUEUE+ "CL_INVALID_DEVICE_QUEUE"))
  (constant (+CL-INVALID-SPEC-ID+ "CL_INVALID_SPEC_ID"))
  (constant (+CL-MAX-SIZE-RESTRICTION-EXCEEDED+ "CL_MAX_SIZE_RESTRICTION_EXCEEDED"))
  (constant (+CL-FALSE+ "CL_FALSE"))
  (constant (+CL-TRUE+ "CL_TRUE"))
  (constant (+CL-BLOCKING+ "CL_BLOCKING"))
  (constant (+CL-NON-BLOCKING+ "CL_NON_BLOCKING"))
  (constant (+CL-PLATFORM-PROFILE+ "CL_PLATFORM_PROFILE"))
  (constant (+CL-PLATFORM-VERSION+ "CL_PLATFORM_VERSION"))
  (constant (+CL-PLATFORM-NAME+ "CL_PLATFORM_NAME"))
  (constant (+CL-PLATFORM-VENDOR+ "CL_PLATFORM_VENDOR"))
  (constant (+CL-PLATFORM-EXTENSIONS+ "CL_PLATFORM_EXTENSIONS"))
  (constant (+CL-PLATFORM-HOST-TIMER-RESOLUTION+ "CL_PLATFORM_HOST_TIMER_RESOLUTION"))
  ;; experimental
  ;; (constant (+CL-PLATFORM-NUMERIC-VERSION+ "CL_PLATFORM_NUMERIC_VERSION"))
  ;; (constant (+CL-PLATFORM-EXTENSIONS-WITH-VERSION+ "CL_PLATFORM_EXTENSIONS_WITH_VERSION"))
  (constant (+CL-DEVICE-TYPE-DEFAULT+ "CL_DEVICE_TYPE_DEFAULT"))
  (constant (+CL-DEVICE-TYPE-CPU+ "CL_DEVICE_TYPE_CPU"))
  (constant (+CL-DEVICE-TYPE-GPU+ "CL_DEVICE_TYPE_GPU"))
  (constant (+CL-DEVICE-TYPE-ACCELERATOR+ "CL_DEVICE_TYPE_ACCELERATOR"))
  (constant (+CL-DEVICE-TYPE-CUSTOM+ "CL_DEVICE_TYPE_CUSTOM"))
  (constant (+CL-DEVICE-TYPE-ALL+ "CL_DEVICE_TYPE_ALL"))
  (constant (+CL-DEVICE-TYPE+ "CL_DEVICE_TYPE"))
  (constant (+CL-DEVICE-VENDOR-ID+ "CL_DEVICE_VENDOR_ID"))
  (constant (+CL-DEVICE-MAX-COMPUTE-UNITS+ "CL_DEVICE_MAX_COMPUTE_UNITS"))
  (constant (+CL-DEVICE-MAX-WORK-ITEM-DIMENSIONS+ "CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS"))
  (constant (+CL-DEVICE-MAX-WORK-GROUP-SIZE+ "CL_DEVICE_MAX_WORK_GROUP_SIZE"))
  (constant (+CL-DEVICE-MAX-WORK-ITEM-SIZES+ "CL_DEVICE_MAX_WORK_ITEM_SIZES"))
  (constant (+CL-DEVICE-PREFERRED-VECTOR-WIDTH-CHAR+ "CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR"))
  (constant (+CL-DEVICE-PREFERRED-VECTOR-WIDTH-SHORT+ "CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT"))
  (constant (+CL-DEVICE-PREFERRED-VECTOR-WIDTH-INT+ "CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT"))
  (constant (+CL-DEVICE-PREFERRED-VECTOR-WIDTH-LONG+ "CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG"))
  (constant (+CL-DEVICE-PREFERRED-VECTOR-WIDTH-FLOAT+ "CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT"))
  (constant (+CL-DEVICE-PREFERRED-VECTOR-WIDTH-DOUBLE+ "CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE"))
  (constant (+CL-DEVICE-MAX-CLOCK-FREQUENCY+ "CL_DEVICE_MAX_CLOCK_FREQUENCY"))
  (constant (+CL-DEVICE-ADDRESS-BITS+ "CL_DEVICE_ADDRESS_BITS"))
  (constant (+CL-DEVICE-MAX-READ-IMAGE-ARGS+ "CL_DEVICE_MAX_READ_IMAGE_ARGS"))
  (constant (+CL-DEVICE-MAX-WRITE-IMAGE-ARGS+ "CL_DEVICE_MAX_WRITE_IMAGE_ARGS"))
  (constant (+CL-DEVICE-MAX-MEM-ALLOC-SIZE+ "CL_DEVICE_MAX_MEM_ALLOC_SIZE"))
  (constant (+CL-DEVICE-IMAGE2D-MAX-WIDTH+ "CL_DEVICE_IMAGE2D_MAX_WIDTH"))
  (constant (+CL-DEVICE-IMAGE2D-MAX-HEIGHT+ "CL_DEVICE_IMAGE2D_MAX_HEIGHT"))
  (constant (+CL-DEVICE-IMAGE3D-MAX-WIDTH+ "CL_DEVICE_IMAGE3D_MAX_WIDTH"))
  (constant (+CL-DEVICE-IMAGE3D-MAX-HEIGHT+ "CL_DEVICE_IMAGE3D_MAX_HEIGHT"))
  (constant (+CL-DEVICE-IMAGE3D-MAX-DEPTH+ "CL_DEVICE_IMAGE3D_MAX_DEPTH"))
  (constant (+CL-DEVICE-IMAGE-SUPPORT+ "CL_DEVICE_IMAGE_SUPPORT"))
  (constant (+CL-DEVICE-MAX-PARAMETER-SIZE+ "CL_DEVICE_MAX_PARAMETER_SIZE"))
  (constant (+CL-DEVICE-MAX-SAMPLERS+ "CL_DEVICE_MAX_SAMPLERS"))
  (constant (+CL-DEVICE-MEM-BASE-ADDR-ALIGN+ "CL_DEVICE_MEM_BASE_ADDR_ALIGN"))
  (constant (+CL-DEVICE-MIN-DATA-TYPE-ALIGN-SIZE+ "CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE"))
  (constant (+CL-DEVICE-SINGLE-FP-CONFIG+ "CL_DEVICE_SINGLE_FP_CONFIG"))
  (constant (+CL-DEVICE-GLOBAL-MEM-CACHE-TYPE+ "CL_DEVICE_GLOBAL_MEM_CACHE_TYPE"))
  (constant (+CL-DEVICE-GLOBAL-MEM-CACHELINE-SIZE+ "CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE"))
  (constant (+CL-DEVICE-GLOBAL-MEM-CACHE-SIZE+ "CL_DEVICE_GLOBAL_MEM_CACHE_SIZE"))
  (constant (+CL-DEVICE-GLOBAL-MEM-SIZE+ "CL_DEVICE_GLOBAL_MEM_SIZE"))
  (constant (+CL-DEVICE-MAX-CONSTANT-BUFFER-SIZE+ "CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE"))
  (constant (+CL-DEVICE-MAX-CONSTANT-ARGS+ "CL_DEVICE_MAX_CONSTANT_ARGS"))
  (constant (+CL-DEVICE-LOCAL-MEM-TYPE+ "CL_DEVICE_LOCAL_MEM_TYPE"))
  (constant (+CL-DEVICE-LOCAL-MEM-SIZE+ "CL_DEVICE_LOCAL_MEM_SIZE"))
  (constant (+CL-DEVICE-ERROR-CORRECTION-SUPPORT+ "CL_DEVICE_ERROR_CORRECTION_SUPPORT"))
  (constant (+CL-DEVICE-PROFILING-TIMER-RESOLUTION+ "CL_DEVICE_PROFILING_TIMER_RESOLUTION"))
  (constant (+CL-DEVICE-ENDIAN-LITTLE+ "CL_DEVICE_ENDIAN_LITTLE"))
  (constant (+CL-DEVICE-AVAILABLE+ "CL_DEVICE_AVAILABLE"))
  (constant (+CL-DEVICE-COMPILER-AVAILABLE+ "CL_DEVICE_COMPILER_AVAILABLE"))
  (constant (+CL-DEVICE-EXECUTION-CAPABILITIES+ "CL_DEVICE_EXECUTION_CAPABILITIES"))
  (constant (+CL-DEVICE-QUEUE-PROPERTIES+ "CL_DEVICE_QUEUE_PROPERTIES"))
  (constant (+CL-DEVICE-QUEUE-ON-HOST-PROPERTIES+ "CL_DEVICE_QUEUE_ON_HOST_PROPERTIES"))
  (constant (+CL-DEVICE-NAME+ "CL_DEVICE_NAME"))
  (constant (+CL-DEVICE-VENDOR+ "CL_DEVICE_VENDOR"))
  (constant (+CL-DRIVER-VERSION+ "CL_DRIVER_VERSION"))
  (constant (+CL-DEVICE-PROFILE+ "CL_DEVICE_PROFILE"))
  (constant (+CL-DEVICE-VERSION+ "CL_DEVICE_VERSION"))
  (constant (+CL-DEVICE-EXTENSIONS+ "CL_DEVICE_EXTENSIONS"))
  (constant (+CL-DEVICE-PLATFORM+ "CL_DEVICE_PLATFORM"))
  (constant (+CL-DEVICE-DOUBLE-FP-CONFIG+ "CL_DEVICE_DOUBLE_FP_CONFIG"))
  (constant (+CL-DEVICE-PREFERRED-VECTOR-WIDTH-HALF+ "CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF"))
  (constant (+CL-DEVICE-HOST-UNIFIED-MEMORY+ "CL_DEVICE_HOST_UNIFIED_MEMORY"))
  (constant (+CL-DEVICE-NATIVE-VECTOR-WIDTH-CHAR+ "CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR"))
  (constant (+CL-DEVICE-NATIVE-VECTOR-WIDTH-SHORT+ "CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT"))
  (constant (+CL-DEVICE-NATIVE-VECTOR-WIDTH-INT+ "CL_DEVICE_NATIVE_VECTOR_WIDTH_INT"))
  (constant (+CL-DEVICE-NATIVE-VECTOR-WIDTH-LONG+ "CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG"))
  (constant (+CL-DEVICE-NATIVE-VECTOR-WIDTH-FLOAT+ "CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT"))
  (constant (+CL-DEVICE-NATIVE-VECTOR-WIDTH-DOUBLE+ "CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE"))
  (constant (+CL-DEVICE-NATIVE-VECTOR-WIDTH-HALF+ "CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF"))
  (constant (+CL-DEVICE-OPENCL-C-VERSION+ "CL_DEVICE_OPENCL_C_VERSION"))
  (constant (+CL-DEVICE-LINKER-AVAILABLE+ "CL_DEVICE_LINKER_AVAILABLE"))
  (constant (+CL-DEVICE-BUILT-IN-KERNELS+ "CL_DEVICE_BUILT_IN_KERNELS"))
  (constant (+CL-DEVICE-IMAGE-MAX-BUFFER-SIZE+ "CL_DEVICE_IMAGE_MAX_BUFFER_SIZE"))
  (constant (+CL-DEVICE-IMAGE-MAX-ARRAY-SIZE+ "CL_DEVICE_IMAGE_MAX_ARRAY_SIZE"))
  (constant (+CL-DEVICE-PARENT-DEVICE+ "CL_DEVICE_PARENT_DEVICE"))
  (constant (+CL-DEVICE-PARTITION-MAX-SUB-DEVICES+ "CL_DEVICE_PARTITION_MAX_SUB_DEVICES"))
  (constant (+CL-DEVICE-PARTITION-PROPERTIES+ "CL_DEVICE_PARTITION_PROPERTIES"))
  (constant (+CL-DEVICE-PARTITION-AFFINITY-DOMAIN+ "CL_DEVICE_PARTITION_AFFINITY_DOMAIN"))
  (constant (+CL-DEVICE-PARTITION-TYPE+ "CL_DEVICE_PARTITION_TYPE"))
  (constant (+CL-DEVICE-REFERENCE-COUNT+ "CL_DEVICE_REFERENCE_COUNT"))
  (constant (+CL-DEVICE-PREFERRED-INTEROP-USER-SYNC+ "CL_DEVICE_PREFERRED_INTEROP_USER_SYNC"))
  (constant (+CL-DEVICE-PRINTF-BUFFER-SIZE+ "CL_DEVICE_PRINTF_BUFFER_SIZE"))
  (constant (+CL-DEVICE-IMAGE-PITCH-ALIGNMENT+ "CL_DEVICE_IMAGE_PITCH_ALIGNMENT"))
  (constant (+CL-DEVICE-IMAGE-BASE-ADDRESS-ALIGNMENT+ "CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT"))
  (constant (+CL-DEVICE-MAX-READ-WRITE-IMAGE-ARGS+ "CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS"))
  (constant (+CL-DEVICE-MAX-GLOBAL-VARIABLE-SIZE+ "CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE"))
  (constant (+CL-DEVICE-QUEUE-ON-DEVICE-PROPERTIES+ "CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES"))
  (constant (+CL-DEVICE-QUEUE-ON-DEVICE-PREFERRED-SIZE+ "CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE"))
  (constant (+CL-DEVICE-QUEUE-ON-DEVICE-MAX-SIZE+ "CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE"))
  (constant (+CL-DEVICE-MAX-ON-DEVICE-QUEUES+ "CL_DEVICE_MAX_ON_DEVICE_QUEUES"))
  (constant (+CL-DEVICE-MAX-ON-DEVICE-EVENTS+ "CL_DEVICE_MAX_ON_DEVICE_EVENTS"))
  (constant (+CL-DEVICE-SVM-CAPABILITIES+ "CL_DEVICE_SVM_CAPABILITIES"))
  (constant (+CL-DEVICE-GLOBAL-VARIABLE-PREFERRED-TOTAL-SIZE+ "CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE"))
  (constant (+CL-DEVICE-MAX-PIPE-ARGS+ "CL_DEVICE_MAX_PIPE_ARGS"))
  (constant (+CL-DEVICE-PIPE-MAX-ACTIVE-RESERVATIONS+ "CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS"))
  (constant (+CL-DEVICE-PIPE-MAX-PACKET-SIZE+ "CL_DEVICE_PIPE_MAX_PACKET_SIZE"))
  (constant (+CL-DEVICE-PREFERRED-PLATFORM-ATOMIC-ALIGNMENT+ "CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT"))
  (constant (+CL-DEVICE-PREFERRED-GLOBAL-ATOMIC-ALIGNMENT+ "CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT"))
  (constant (+CL-DEVICE-PREFERRED-LOCAL-ATOMIC-ALIGNMENT+ "CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT"))
  (constant (+CL-DEVICE-IL-VERSION+ "CL_DEVICE_IL_VERSION"))
  (constant (+CL-DEVICE-MAX-NUM-SUB-GROUPS+ "CL_DEVICE_MAX_NUM_SUB_GROUPS"))
  (constant (+CL-DEVICE-SUB-GROUP-INDEPENDENT-FORWARD-PROGRESS+ "CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS"))
  ;; experimental
  ;; (constant (+CL-DEVICE-NUMERIC-VERSION+ "CL_DEVICE_NUMERIC_VERSION"))
  ;; (constant (+CL-DEVICE-EXTENSIONS-WITH-VERSION+ "CL_DEVICE_EXTENSIONS_WITH_VERSION"))
  ;; (constant (+CL-DEVICE-ILS-WITH-VERSION+ "CL_DEVICE_ILS_WITH_VERSION"))
  ;; (constant (+CL-DEVICE-BUILT-IN-KERNELS-WITH-VERSION+ "CL_DEVICE_BUILT_IN_KERNELS_WITH_VERSION"))
  ;; (constant (+CL-DEVICE-ATOMIC-MEMORY-CAPABILITIES+ "CL_DEVICE_ATOMIC_MEMORY_CAPABILITIES"))
  ;; (constant (+CL-DEVICE-ATOMIC-FENCE-CAPABILITIES+ "CL_DEVICE_ATOMIC_FENCE_CAPABILITIES"))
  ;; (constant (+CL-DEVICE-NON-UNIFORM-WORK-GROUP-SUPPORT+ "CL_DEVICE_NON_UNIFORM_WORK_GROUP_SUPPORT"))
  ;; (constant (+CL-DEVICE-OPENCL-C-ALL-VERSIONS+ "CL_DEVICE_OPENCL_C_ALL_VERSIONS"))
  ;; (constant (+CL-DEVICE-PREFERRED-WORK-GROUP-SIZE-MULTIPLE+ "CL_DEVICE_PREFERRED_WORK_GROUP_SIZE_MULTIPLE"))
  ;; (constant (+CL-DEVICE-WORK-GROUP-COLLECTIVE-FUNCTIONS-SUPPORT+ "CL_DEVICE_WORK_GROUP_COLLECTIVE_FUNCTIONS_SUPPORT"))
  ;; (constant (+CL-DEVICE-GENERIC-ADDRESS-SPACE-SUPPORT+ "CL_DEVICE_GENERIC_ADDRESS_SPACE_SUPPORT"))
  ;; (constant (+CL-DEVICE-OPENCL-C-FEATURES+ "CL_DEVICE_OPENCL_C_FEATURES"))
  ;; (constant (+CL-DEVICE-DEVICE-ENQUEUE-SUPPORT+ "CL_DEVICE_DEVICE_ENQUEUE_SUPPORT"))
  ;; (constant (+CL-DEVICE-PIPE-SUPPORT+ "CL_DEVICE_PIPE_SUPPORT"))
  (constant (+CL-FP-DENORM+ "CL_FP_DENORM"))
  (constant (+CL-FP-INF-NAN+ "CL_FP_INF_NAN"))
  (constant (+CL-FP-ROUND-TO-NEAREST+ "CL_FP_ROUND_TO_NEAREST"))
  (constant (+CL-FP-ROUND-TO-ZERO+ "CL_FP_ROUND_TO_ZERO"))
  (constant (+CL-FP-ROUND-TO-INF+ "CL_FP_ROUND_TO_INF"))
  (constant (+CL-FP-FMA+ "CL_FP_FMA"))
  (constant (+CL-FP-SOFT-FLOAT+ "CL_FP_SOFT_FLOAT"))
  (constant (+CL-FP-CORRECTLY-ROUNDED-DIVIDE-SQRT+ "CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT"))
  (constant (+CL-NONE+ "CL_NONE"))
  (constant (+CL-READ-ONLY-CACHE+ "CL_READ_ONLY_CACHE"))
  (constant (+CL-READ-WRITE-CACHE+ "CL_READ_WRITE_CACHE"))
  (constant (+CL-LOCAL+ "CL_LOCAL"))
  (constant (+CL-GLOBAL+ "CL_GLOBAL"))
  (constant (+CL-EXEC-KERNEL+ "CL_EXEC_KERNEL"))
  (constant (+CL-EXEC-NATIVE-KERNEL+ "CL_EXEC_NATIVE_KERNEL"))
  (constant (+CL-QUEUE-OUT-OF-ORDER-EXEC-MODE-ENABLE+ "CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE"))
  (constant (+CL-QUEUE-PROFILING-ENABLE+ "CL_QUEUE_PROFILING_ENABLE"))
  (constant (+CL-QUEUE-ON-DEVICE+ "CL_QUEUE_ON_DEVICE"))
  (constant (+CL-QUEUE-ON-DEVICE-DEFAULT+ "CL_QUEUE_ON_DEVICE_DEFAULT"))
  (constant (+CL-CONTEXT-REFERENCE-COUNT+ "CL_CONTEXT_REFERENCE_COUNT"))
  (constant (+CL-CONTEXT-DEVICES+ "CL_CONTEXT_DEVICES"))
  (constant (+CL-CONTEXT-PROPERTIES+ "CL_CONTEXT_PROPERTIES"))
  (constant (+CL-CONTEXT-NUM-DEVICES+ "CL_CONTEXT_NUM_DEVICES"))
  (constant (+CL-CONTEXT-PLATFORM+ "CL_CONTEXT_PLATFORM"))
  (constant (+CL-CONTEXT-INTEROP-USER-SYNC+ "CL_CONTEXT_INTEROP_USER_SYNC"))
  (constant (+CL-DEVICE-PARTITION-EQUALLY+ "CL_DEVICE_PARTITION_EQUALLY"))
  (constant (+CL-DEVICE-PARTITION-BY-COUNTS+ "CL_DEVICE_PARTITION_BY_COUNTS"))
  (constant (+CL-DEVICE-PARTITION-BY-COUNTS-LIST-END+ "CL_DEVICE_PARTITION_BY_COUNTS_LIST_END"))
  (constant (+CL-DEVICE-PARTITION-BY-AFFINITY-DOMAIN+ "CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN"))
  (constant (+CL-DEVICE-AFFINITY-DOMAIN-NUMA+ "CL_DEVICE_AFFINITY_DOMAIN_NUMA"))
  (constant (+CL-DEVICE-AFFINITY-DOMAIN-L4-CACHE+ "CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE"))
  (constant (+CL-DEVICE-AFFINITY-DOMAIN-L3-CACHE+ "CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE"))
  (constant (+CL-DEVICE-AFFINITY-DOMAIN-L2-CACHE+ "CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE"))
  (constant (+CL-DEVICE-AFFINITY-DOMAIN-L1-CACHE+ "CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE"))
  (constant (+CL-DEVICE-AFFINITY-DOMAIN-NEXT-PARTITIONABLE+ "CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE"))
  (constant (+CL-DEVICE-SVM-COARSE-GRAIN-BUFFER+ "CL_DEVICE_SVM_COARSE_GRAIN_BUFFER"))
  (constant (+CL-DEVICE-SVM-FINE-GRAIN-BUFFER+ "CL_DEVICE_SVM_FINE_GRAIN_BUFFER"))
  (constant (+CL-DEVICE-SVM-FINE-GRAIN-SYSTEM+ "CL_DEVICE_SVM_FINE_GRAIN_SYSTEM"))
  (constant (+CL-DEVICE-SVM-ATOMICS+ "CL_DEVICE_SVM_ATOMICS"))
  (constant (+CL-QUEUE-CONTEXT+ "CL_QUEUE_CONTEXT"))
  (constant (+CL-QUEUE-DEVICE+ "CL_QUEUE_DEVICE"))
  (constant (+CL-QUEUE-REFERENCE-COUNT+ "CL_QUEUE_REFERENCE_COUNT"))
  (constant (+CL-QUEUE-PROPERTIES+ "CL_QUEUE_PROPERTIES"))
  (constant (+CL-QUEUE-SIZE+ "CL_QUEUE_SIZE"))
  (constant (+CL-QUEUE-DEVICE-DEFAULT+ "CL_QUEUE_DEVICE_DEFAULT"))
  ;; (constant (+CL-QUEUE-PROPERTIES-ARRAY+ "CL_QUEUE_PROPERTIES_ARRAY"))
  (constant (+CL-MEM-READ-WRITE+ "CL_MEM_READ_WRITE"))
  (constant (+CL-MEM-WRITE-ONLY+ "CL_MEM_WRITE_ONLY"))
  (constant (+CL-MEM-READ-ONLY+ "CL_MEM_READ_ONLY"))
  (constant (+CL-MEM-USE-HOST-PTR+ "CL_MEM_USE_HOST_PTR"))
  (constant (+CL-MEM-ALLOC-HOST-PTR+ "CL_MEM_ALLOC_HOST_PTR"))
  (constant (+CL-MEM-COPY-HOST-PTR+ "CL_MEM_COPY_HOST_PTR"))
  (constant (+CL-MEM-HOST-WRITE-ONLY+ "CL_MEM_HOST_WRITE_ONLY"))
  (constant (+CL-MEM-HOST-READ-ONLY+ "CL_MEM_HOST_READ_ONLY"))
  (constant (+CL-MEM-HOST-NO-ACCESS+ "CL_MEM_HOST_NO_ACCESS"))
  (constant (+CL-MEM-SVM-FINE-GRAIN-BUFFER+ "CL_MEM_SVM_FINE_GRAIN_BUFFER"))
  (constant (+CL-MEM-SVM-ATOMICS+ "CL_MEM_SVM_ATOMICS"))
  (constant (+CL-MEM-KERNEL-READ-AND-WRITE+ "CL_MEM_KERNEL_READ_AND_WRITE"))
  (constant (+CL-MIGRATE-MEM-OBJECT-HOST+ "CL_MIGRATE_MEM_OBJECT_HOST"))
  (constant (+CL-MIGRATE-MEM-OBJECT-CONTENT-UNDEFINED+ "CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED"))
  (constant (+CL-R+ "CL_R"))
  (constant (+CL-A+ "CL_A"))
  (constant (+CL-RG+ "CL_RG"))
  (constant (+CL-RA+ "CL_RA"))
  (constant (+CL-RGB+ "CL_RGB"))
  (constant (+CL-RGBA+ "CL_RGBA"))
  (constant (+CL-BGRA+ "CL_BGRA"))
  (constant (+CL-ARGB+ "CL_ARGB"))
  (constant (+CL-INTENSITY+ "CL_INTENSITY"))
  (constant (+CL-LUMINANCE+ "CL_LUMINANCE"))
  (constant (+CL-Rx+ "CL_Rx"))
  (constant (+CL-RGx+ "CL_RGx"))
  (constant (+CL-RGBx+ "CL_RGBx"))
  (constant (+CL-DEPTH+ "CL_DEPTH"))
  (constant (+CL-DEPTH-STENCIL+ "CL_DEPTH_STENCIL"))
  (constant (+CL-sRGB+ "CL_sRGB"))
  (constant (+CL-sRGBx+ "CL_sRGBx"))
  (constant (+CL-sRGBA+ "CL_sRGBA"))
  (constant (+CL-sBGRA+ "CL_sBGRA"))
  (constant (+CL-ABGR+ "CL_ABGR"))
  (constant (+CL-SNORM-INT8+ "CL_SNORM_INT8"))
  (constant (+CL-SNORM-INT16+ "CL_SNORM_INT16"))
  (constant (+CL-UNORM-INT8+ "CL_UNORM_INT8"))
  (constant (+CL-UNORM-INT16+ "CL_UNORM_INT16"))
  (constant (+CL-UNORM-SHORT-565+ "CL_UNORM_SHORT_565"))
  (constant (+CL-UNORM-SHORT-555+ "CL_UNORM_SHORT_555"))
  (constant (+CL-UNORM-INT-101010+ "CL_UNORM_INT_101010"))
  (constant (+CL-SIGNED-INT8+ "CL_SIGNED_INT8"))
  (constant (+CL-SIGNED-INT16+ "CL_SIGNED_INT16"))
  (constant (+CL-SIGNED-INT32+ "CL_SIGNED_INT32"))
  (constant (+CL-UNSIGNED-INT8+ "CL_UNSIGNED_INT8"))
  (constant (+CL-UNSIGNED-INT16+ "CL_UNSIGNED_INT16"))
  (constant (+CL-UNSIGNED-INT32+ "CL_UNSIGNED_INT32"))
  (constant (+CL-HALF-FLOAT+ "CL_HALF_FLOAT"))
  (constant (+CL-FLOAT+ "CL_FLOAT"))
  (constant (+CL-UNORM-INT24+ "CL_UNORM_INT24"))
  (constant (+CL-UNORM-INT-101010-2+ "CL_UNORM_INT_101010_2"))
  (constant (+CL-MEM-OBJECT-BUFFER+ "CL_MEM_OBJECT_BUFFER"))
  (constant (+CL-MEM-OBJECT-IMAGE2D+ "CL_MEM_OBJECT_IMAGE2D"))
  (constant (+CL-MEM-OBJECT-IMAGE3D+ "CL_MEM_OBJECT_IMAGE3D"))
  (constant (+CL-MEM-OBJECT-IMAGE2D-ARRAY+ "CL_MEM_OBJECT_IMAGE2D_ARRAY"))
  (constant (+CL-MEM-OBJECT-IMAGE1D+ "CL_MEM_OBJECT_IMAGE1D"))
  (constant (+CL-MEM-OBJECT-IMAGE1D-ARRAY+ "CL_MEM_OBJECT_IMAGE1D_ARRAY"))
  (constant (+CL-MEM-OBJECT-IMAGE1D-BUFFER+ "CL_MEM_OBJECT_IMAGE1D_BUFFER"))
  (constant (+CL-MEM-OBJECT-PIPE+ "CL_MEM_OBJECT_PIPE"))
  (constant (+CL-MEM-TYPE+ "CL_MEM_TYPE"))
  (constant (+CL-MEM-FLAGS+ "CL_MEM_FLAGS"))
  (constant (+CL-MEM-SIZE+ "CL_MEM_SIZE"))
  (constant (+CL-MEM-HOST-PTR+ "CL_MEM_HOST_PTR"))
  (constant (+CL-MEM-MAP-COUNT+ "CL_MEM_MAP_COUNT"))
  (constant (+CL-MEM-REFERENCE-COUNT+ "CL_MEM_REFERENCE_COUNT"))
  (constant (+CL-MEM-CONTEXT+ "CL_MEM_CONTEXT"))
  (constant (+CL-MEM-ASSOCIATED-MEMOBJECT+ "CL_MEM_ASSOCIATED_MEMOBJECT"))
  (constant (+CL-MEM-OFFSET+ "CL_MEM_OFFSET"))
  (constant (+CL-MEM-USES-SVM-POINTER+ "CL_MEM_USES_SVM_POINTER"))
  ;; (constant (+CL-MEM-PROPERTIES+ "CL_MEM_PROPERTIES"))
  (constant (+CL-IMAGE-FORMAT+ "CL_IMAGE_FORMAT"))
  (constant (+CL-IMAGE-ELEMENT-SIZE+ "CL_IMAGE_ELEMENT_SIZE"))
  (constant (+CL-IMAGE-ROW-PITCH+ "CL_IMAGE_ROW_PITCH"))
  (constant (+CL-IMAGE-SLICE-PITCH+ "CL_IMAGE_SLICE_PITCH"))
  (constant (+CL-IMAGE-WIDTH+ "CL_IMAGE_WIDTH"))
  (constant (+CL-IMAGE-HEIGHT+ "CL_IMAGE_HEIGHT"))
  (constant (+CL-IMAGE-DEPTH+ "CL_IMAGE_DEPTH"))
  (constant (+CL-IMAGE-ARRAY-SIZE+ "CL_IMAGE_ARRAY_SIZE"))
  (constant (+CL-IMAGE-BUFFER+ "CL_IMAGE_BUFFER"))
  (constant (+CL-IMAGE-NUM-MIP-LEVELS+ "CL_IMAGE_NUM_MIP_LEVELS"))
  (constant (+CL-IMAGE-NUM-SAMPLES+ "CL_IMAGE_NUM_SAMPLES"))
  (constant (+CL-PIPE-PACKET-SIZE+ "CL_PIPE_PACKET_SIZE"))
  (constant (+CL-PIPE-MAX-PACKETS+ "CL_PIPE_MAX_PACKETS"))
  ;; experimental
  ;; (constant (+CL-PIPE-PROPERTIES+ "CL_PIPE_PROPERTIES"))
  (constant (+CL-ADDRESS-NONE+ "CL_ADDRESS_NONE"))
  (constant (+CL-ADDRESS-CLAMP-TO-EDGE+ "CL_ADDRESS_CLAMP_TO_EDGE"))
  (constant (+CL-ADDRESS-CLAMP+ "CL_ADDRESS_CLAMP"))
  (constant (+CL-ADDRESS-REPEAT+ "CL_ADDRESS_REPEAT"))
  (constant (+CL-ADDRESS-MIRRORED-REPEAT+ "CL_ADDRESS_MIRRORED_REPEAT"))
  (constant (+CL-FILTER-NEAREST+ "CL_FILTER_NEAREST"))
  (constant (+CL-FILTER-LINEAR+ "CL_FILTER_LINEAR"))
  (constant (+CL-SAMPLER-REFERENCE-COUNT+ "CL_SAMPLER_REFERENCE_COUNT"))
  (constant (+CL-SAMPLER-CONTEXT+ "CL_SAMPLER_CONTEXT"))
  (constant (+CL-SAMPLER-NORMALIZED-COORDS+ "CL_SAMPLER_NORMALIZED_COORDS"))
  (constant (+CL-SAMPLER-ADDRESSING-MODE+ "CL_SAMPLER_ADDRESSING_MODE"))
  (constant (+CL-SAMPLER-FILTER-MODE+ "CL_SAMPLER_FILTER_MODE"))
  (constant (+CL-SAMPLER-MIP-FILTER-MODE+ "CL_SAMPLER_MIP_FILTER_MODE"))
  (constant (+CL-SAMPLER-LOD-MIN+ "CL_SAMPLER_LOD_MIN"))
  (constant (+CL-SAMPLER-LOD-MAX+ "CL_SAMPLER_LOD_MAX"))
  ;; experimental
  ;; (constant (+CL-SAMPLER-PROPERTIES+ "CL_SAMPLER_PROPERTIES"))
  (constant (+CL-MAP-READ+ "CL_MAP_READ"))
  (constant (+CL-MAP-WRITE+ "CL_MAP_WRITE"))
  (constant (+CL-MAP-WRITE-INVALIDATE-REGION+ "CL_MAP_WRITE_INVALIDATE_REGION"))
  (constant (+CL-PROGRAM-REFERENCE-COUNT+ "CL_PROGRAM_REFERENCE_COUNT"))
  (constant (+CL-PROGRAM-CONTEXT+ "CL_PROGRAM_CONTEXT"))
  (constant (+CL-PROGRAM-NUM-DEVICES+ "CL_PROGRAM_NUM_DEVICES"))
  (constant (+CL-PROGRAM-DEVICES+ "CL_PROGRAM_DEVICES"))
  (constant (+CL-PROGRAM-SOURCE+ "CL_PROGRAM_SOURCE"))
  (constant (+CL-PROGRAM-BINARY-SIZES+ "CL_PROGRAM_BINARY_SIZES"))
  (constant (+CL-PROGRAM-BINARIES+ "CL_PROGRAM_BINARIES"))
  (constant (+CL-PROGRAM-NUM-KERNELS+ "CL_PROGRAM_NUM_KERNELS"))
  (constant (+CL-PROGRAM-KERNEL-NAMES+ "CL_PROGRAM_KERNEL_NAMES"))
  (constant (+CL-PROGRAM-IL+ "CL_PROGRAM_IL"))
  (constant (+CL-PROGRAM-SCOPE-GLOBAL-CTORS-PRESENT+ "CL_PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT"))
  (constant (+CL-PROGRAM-SCOPE-GLOBAL-DTORS-PRESENT+ "CL_PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT"))
  (constant (+CL-PROGRAM-BUILD-STATUS+ "CL_PROGRAM_BUILD_STATUS"))
  (constant (+CL-PROGRAM-BUILD-OPTIONS+ "CL_PROGRAM_BUILD_OPTIONS"))
  (constant (+CL-PROGRAM-BUILD-LOG+ "CL_PROGRAM_BUILD_LOG"))
  (constant (+CL-PROGRAM-BINARY-TYPE+ "CL_PROGRAM_BINARY_TYPE"))
  (constant (+CL-PROGRAM-BUILD-GLOBAL-VARIABLE-TOTAL-SIZE+ "CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE"))
  (constant (+CL-PROGRAM-BINARY-TYPE-NONE+ "CL_PROGRAM_BINARY_TYPE_NONE"))
  (constant (+CL-PROGRAM-BINARY-TYPE-COMPILED-OBJECT+ "CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT"))
  (constant (+CL-PROGRAM-BINARY-TYPE-LIBRARY+ "CL_PROGRAM_BINARY_TYPE_LIBRARY"))
  (constant (+CL-PROGRAM-BINARY-TYPE-EXECUTABLE+ "CL_PROGRAM_BINARY_TYPE_EXECUTABLE"))
  (constant (+CL-BUILD-SUCCESS+ "CL_BUILD_SUCCESS"))
  (constant (+CL-BUILD-NONE+ "CL_BUILD_NONE"))
  (constant (+CL-BUILD-ERROR+ "CL_BUILD_ERROR"))
  (constant (+CL-BUILD-IN-PROGRESS+ "CL_BUILD_IN_PROGRESS"))
  (constant (+CL-KERNEL-FUNCTION-NAME+ "CL_KERNEL_FUNCTION_NAME"))
  (constant (+CL-KERNEL-NUM-ARGS+ "CL_KERNEL_NUM_ARGS"))
  (constant (+CL-KERNEL-REFERENCE-COUNT+ "CL_KERNEL_REFERENCE_COUNT"))
  (constant (+CL-KERNEL-CONTEXT+ "CL_KERNEL_CONTEXT"))
  (constant (+CL-KERNEL-PROGRAM+ "CL_KERNEL_PROGRAM"))
  (constant (+CL-KERNEL-ATTRIBUTES+ "CL_KERNEL_ATTRIBUTES"))
  (constant (+CL-KERNEL-ARG-ADDRESS-QUALIFIER+ "CL_KERNEL_ARG_ADDRESS_QUALIFIER"))
  (constant (+CL-KERNEL-ARG-ACCESS-QUALIFIER+ "CL_KERNEL_ARG_ACCESS_QUALIFIER"))
  (constant (+CL-KERNEL-ARG-TYPE-NAME+ "CL_KERNEL_ARG_TYPE_NAME"))
  (constant (+CL-KERNEL-ARG-TYPE-QUALIFIER+ "CL_KERNEL_ARG_TYPE_QUALIFIER"))
  (constant (+CL-KERNEL-ARG-NAME+ "CL_KERNEL_ARG_NAME"))
  (constant (+CL-KERNEL-ARG-ADDRESS-GLOBAL+ "CL_KERNEL_ARG_ADDRESS_GLOBAL"))
  (constant (+CL-KERNEL-ARG-ADDRESS-LOCAL+ "CL_KERNEL_ARG_ADDRESS_LOCAL"))
  (constant (+CL-KERNEL-ARG-ADDRESS-CONSTANT+ "CL_KERNEL_ARG_ADDRESS_CONSTANT"))
  (constant (+CL-KERNEL-ARG-ADDRESS-PRIVATE+ "CL_KERNEL_ARG_ADDRESS_PRIVATE"))
  (constant (+CL-KERNEL-ARG-ACCESS-READ-ONLY+ "CL_KERNEL_ARG_ACCESS_READ_ONLY"))
  (constant (+CL-KERNEL-ARG-ACCESS-WRITE-ONLY+ "CL_KERNEL_ARG_ACCESS_WRITE_ONLY"))
  (constant (+CL-KERNEL-ARG-ACCESS-READ-WRITE+ "CL_KERNEL_ARG_ACCESS_READ_WRITE"))
  (constant (+CL-KERNEL-ARG-ACCESS-NONE+ "CL_KERNEL_ARG_ACCESS_NONE"))
  (constant (+CL-KERNEL-ARG-TYPE-NONE+ "CL_KERNEL_ARG_TYPE_NONE"))
  (constant (+CL-KERNEL-ARG-TYPE-CONST+ "CL_KERNEL_ARG_TYPE_CONST"))
  (constant (+CL-KERNEL-ARG-TYPE-RESTRICT+ "CL_KERNEL_ARG_TYPE_RESTRICT"))
  (constant (+CL-KERNEL-ARG-TYPE-VOLATILE+ "CL_KERNEL_ARG_TYPE_VOLATILE"))
  (constant (+CL-KERNEL-ARG-TYPE-PIPE+ "CL_KERNEL_ARG_TYPE_PIPE"))
  (constant (+CL-KERNEL-WORK-GROUP-SIZE+ "CL_KERNEL_WORK_GROUP_SIZE"))
  (constant (+CL-KERNEL-COMPILE-WORK-GROUP-SIZE+ "CL_KERNEL_COMPILE_WORK_GROUP_SIZE"))
  (constant (+CL-KERNEL-LOCAL-MEM-SIZE+ "CL_KERNEL_LOCAL_MEM_SIZE"))
  (constant (+CL-KERNEL-PREFERRED-WORK-GROUP-SIZE-MULTIPLE+ "CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE"))
  (constant (+CL-KERNEL-PRIVATE-MEM-SIZE+ "CL_KERNEL_PRIVATE_MEM_SIZE"))
  (constant (+CL-KERNEL-GLOBAL-WORK-SIZE+ "CL_KERNEL_GLOBAL_WORK_SIZE"))
  (constant (+CL-KERNEL-MAX-SUB-GROUP-SIZE-FOR-NDRANGE+ "CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE"))
  (constant (+CL-KERNEL-SUB-GROUP-COUNT-FOR-NDRANGE+ "CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE"))
  (constant (+CL-KERNEL-LOCAL-SIZE-FOR-SUB-GROUP-COUNT+ "CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT"))
  (constant (+CL-KERNEL-MAX-NUM-SUB-GROUPS+ "CL_KERNEL_MAX_NUM_SUB_GROUPS"))
  (constant (+CL-KERNEL-COMPILE-NUM-SUB-GROUPS+ "CL_KERNEL_COMPILE_NUM_SUB_GROUPS"))
  (constant (+CL-KERNEL-EXEC-INFO-SVM-PTRS+ "CL_KERNEL_EXEC_INFO_SVM_PTRS"))
  (constant (+CL-KERNEL-EXEC-INFO-SVM-FINE-GRAIN-SYSTEM+ "CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM"))
  (constant (+CL-EVENT-COMMAND-QUEUE+ "CL_EVENT_COMMAND_QUEUE"))
  (constant (+CL-EVENT-COMMAND-TYPE+ "CL_EVENT_COMMAND_TYPE"))
  (constant (+CL-EVENT-REFERENCE-COUNT+ "CL_EVENT_REFERENCE_COUNT"))
  (constant (+CL-EVENT-COMMAND-EXECUTION-STATUS+ "CL_EVENT_COMMAND_EXECUTION_STATUS"))
  (constant (+CL-EVENT-CONTEXT+ "CL_EVENT_CONTEXT"))
  (constant (+CL-COMMAND-NDRANGE-KERNEL+ "CL_COMMAND_NDRANGE_KERNEL"))
  (constant (+CL-COMMAND-TASK+ "CL_COMMAND_TASK"))
  (constant (+CL-COMMAND-NATIVE-KERNEL+ "CL_COMMAND_NATIVE_KERNEL"))
  (constant (+CL-COMMAND-READ-BUFFER+ "CL_COMMAND_READ_BUFFER"))
  (constant (+CL-COMMAND-WRITE-BUFFER+ "CL_COMMAND_WRITE_BUFFER"))
  (constant (+CL-COMMAND-COPY-BUFFER+ "CL_COMMAND_COPY_BUFFER"))
  (constant (+CL-COMMAND-READ-IMAGE+ "CL_COMMAND_READ_IMAGE"))
  (constant (+CL-COMMAND-WRITE-IMAGE+ "CL_COMMAND_WRITE_IMAGE"))
  (constant (+CL-COMMAND-COPY-IMAGE+ "CL_COMMAND_COPY_IMAGE"))
  (constant (+CL-COMMAND-COPY-IMAGE-TO-BUFFER+ "CL_COMMAND_COPY_IMAGE_TO_BUFFER"))
  (constant (+CL-COMMAND-COPY-BUFFER-TO-IMAGE+ "CL_COMMAND_COPY_BUFFER_TO_IMAGE"))
  (constant (+CL-COMMAND-MAP-BUFFER+ "CL_COMMAND_MAP_BUFFER"))
  (constant (+CL-COMMAND-MAP-IMAGE+ "CL_COMMAND_MAP_IMAGE"))
  (constant (+CL-COMMAND-UNMAP-MEM-OBJECT+ "CL_COMMAND_UNMAP_MEM_OBJECT"))
  (constant (+CL-COMMAND-MARKER+ "CL_COMMAND_MARKER"))
  (constant (+CL-COMMAND-ACQUIRE-GL-OBJECTS+ "CL_COMMAND_ACQUIRE_GL_OBJECTS"))
  (constant (+CL-COMMAND-RELEASE-GL-OBJECTS+ "CL_COMMAND_RELEASE_GL_OBJECTS"))
  (constant (+CL-COMMAND-READ-BUFFER-RECT+ "CL_COMMAND_READ_BUFFER_RECT"))
  (constant (+CL-COMMAND-WRITE-BUFFER-RECT+ "CL_COMMAND_WRITE_BUFFER_RECT"))
  (constant (+CL-COMMAND-COPY-BUFFER-RECT+ "CL_COMMAND_COPY_BUFFER_RECT"))
  (constant (+CL-COMMAND-USER+ "CL_COMMAND_USER"))
  (constant (+CL-COMMAND-BARRIER+ "CL_COMMAND_BARRIER"))
  (constant (+CL-COMMAND-MIGRATE-MEM-OBJECTS+ "CL_COMMAND_MIGRATE_MEM_OBJECTS"))
  (constant (+CL-COMMAND-FILL-BUFFER+ "CL_COMMAND_FILL_BUFFER"))
  (constant (+CL-COMMAND-FILL-IMAGE+ "CL_COMMAND_FILL_IMAGE"))
  (constant (+CL-COMMAND-SVM-FREE+ "CL_COMMAND_SVM_FREE"))
  (constant (+CL-COMMAND-SVM-MEMCPY+ "CL_COMMAND_SVM_MEMCPY"))
  (constant (+CL-COMMAND-SVM-MEMFILL+ "CL_COMMAND_SVM_MEMFILL"))
  (constant (+CL-COMMAND-SVM-MAP+ "CL_COMMAND_SVM_MAP"))
  (constant (+CL-COMMAND-SVM-UNMAP+ "CL_COMMAND_SVM_UNMAP"))
  ;; experimental
  ;; (constant (+CL-COMMAND-SVM-MIGRATE-MEM+ "CL_COMMAND_SVM_MIGRATE_MEM"))
  (constant (+CL-COMPLETE+ "CL_COMPLETE"))
  (constant (+CL-RUNNING+ "CL_RUNNING"))
  (constant (+CL-SUBMITTED+ "CL_SUBMITTED"))
  (constant (+CL-QUEUED+ "CL_QUEUED"))
  (constant (+CL-BUFFER-CREATE-TYPE-REGION+ "CL_BUFFER_CREATE_TYPE_REGION"))
  (constant (+CL-PROFILING-COMMAND-QUEUED+ "CL_PROFILING_COMMAND_QUEUED"))
  (constant (+CL-PROFILING-COMMAND-SUBMIT+ "CL_PROFILING_COMMAND_SUBMIT"))
  (constant (+CL-PROFILING-COMMAND-START+ "CL_PROFILING_COMMAND_START"))
  (constant (+CL-PROFILING-COMMAND-END+ "CL_PROFILING_COMMAND_END"))
  (constant (+CL-PROFILING-COMMAND-COMPLETE+ "CL_PROFILING_COMMAND_COMPLETE"))
  ;; experimental
  ;; (constant (+CL-DEVICE-ATOMIC-ORDER-RELAXED+ "CL_DEVICE_ATOMIC_ORDER_RELAXED"))
  ;; (constant (+CL-DEVICE-ATOMIC-ORDER-ACQ-REL+ "CL_DEVICE_ATOMIC_ORDER_ACQ_REL"))
  ;; (constant (+CL-DEVICE-ATOMIC-ORDER-SEQ-CST+ "CL_DEVICE_ATOMIC_ORDER_SEQ_CST"))
  ;; (constant (+CL-DEVICE-ATOMIC-SCOPE-WORK-ITEM+ "CL_DEVICE_ATOMIC_SCOPE_WORK_ITEM"))
  ;; (constant (+CL-DEVICE-ATOMIC-SCOPE-WORK-GROUP+ "CL_DEVICE_ATOMIC_SCOPE_WORK_GROUP"))
  ;; (constant (+CL-DEVICE-ATOMIC-SCOPE-DEVICE+ "CL_DEVICE_ATOMIC_SCOPE_DEVICE"))
  ;; (constant (+CL-DEVICE-ATOMIC-SCOPE-ALL-SVM-DEVICES+ "CL_DEVICE_ATOMIC_SCOPE_ALL_SVM_DEVICES"))
  (constant (+CL-KHRONOS-VENDOR-ID-CODEPLAY+ "CL_KHRONOS_VENDOR_ID_CODEPLAY"))
  )

;; Numerical macro constants
(progn
  (constant (+CL-CHAR-BIT+ "CL_CHAR_BIT"))
  (constant (+CL-SCHAR-MAX+ "CL_SCHAR_MAX"))
  (constant (+CL-SCHAR-MIN+ "CL_SCHAR_MIN"))
  (constant (+CL-CHAR-MAX+ "CL_CHAR_MAX"))
  (constant (+CL-CHAR-MIN+ "CL_CHAR_MIN"))
  (constant (+CL-UCHAR-MAX+ "CL_UCHAR_MAX"))
  (constant (+CL-SHRT-MAX+ "CL_SHRT_MAX"))
  (constant (+CL-SHRT-MIN+ "CL_SHRT_MIN"))
  (constant (+CL-USHRT-MAX+ "CL_USHRT_MAX"))
  (constant (+CL-INT-MAX+ "CL_INT_MAX"))
  (constant (+CL-INT-MIN+ "CL_INT_MIN"))
  (constant (+CL-UINT-MAX+ "CL_UINT_MAX"))
  (constant (+CL-LONG-MAX+ "CL_LONG_MAX"))
  (constant (+CL-LONG-MIN+ "CL_LONG_MIN"))
  (constant (+CL-ULONG-MAX+ "CL_ULONG_MAX"))
  (constant (+CL-FLT-DIG+ "CL_FLT_DIG"))
  (constant (+CL-FLT-MANT-DIG+ "CL_FLT_MANT_DIG"))
  (constant (+CL-FLT-MAX-10-EXP+ "CL_FLT_MAX_10_EXP"))
  (constant (+CL-FLT-MAX-EXP+ "CL_FLT_MAX_EXP"))
  (constant (+CL-FLT-MIN-10-EXP+ "CL_FLT_MIN_10_EXP"))
  (constant (+CL-FLT-MIN-EXP+ "CL_FLT_MIN_EXP"))
  (constant (+CL-FLT-RADIX+ "CL_FLT_RADIX"))
  (constant (+CL-FLT-MAX+ "CL_FLT_MAX")
            :type double-float)
  (constant (+CL-FLT-MIN+ "CL_FLT_MIN")
            :type double-float)
  (constant (+CL-FLT-EPSILON+ "CL_FLT_EPSILON")
            :type double-float)
  (constant (+CL-HALF-DIG+ "CL_HALF_DIG"))
  (constant (+CL-HALF-MANT-DIG+ "CL_HALF_MANT_DIG"))
  (constant (+CL-HALF-MAX-10-EXP+ "CL_HALF_MAX_10_EXP"))
  (constant (+CL-HALF-MAX-EXP+ "CL_HALF_MAX_EXP"))
  (constant (+CL-HALF-MIN-10-EXP+ "CL_HALF_MIN_10_EXP"))
  (constant (+CL-HALF-MIN-EXP+ "CL_HALF_MIN_EXP"))
  (constant (+CL-HALF-RADIX+ "CL_HALF_RADIX"))
  (constant (+CL-HALF-MAX+ "CL_HALF_MAX")
            :type double-float)
  (constant (+CL-HALF-MIN+ "CL_HALF_MIN")
            :type double-float)
  (constant (+CL-HALF-EPSILON+ "CL_HALF_EPSILON")
            :type double-float)
  (constant (+CL-DBL-DIG+ "CL_DBL_DIG"))
  (constant (+CL-DBL-MANT-DIG+ "CL_DBL_MANT_DIG"))
  (constant (+CL-DBL-MAX-10-EXP+ "CL_DBL_MAX_10_EXP"))
  (constant (+CL-DBL-MAX-EXP+ "CL_DBL_MAX_EXP"))
  (constant (+CL-DBL-MIN-10-EXP+ "CL_DBL_MIN_10_EXP"))
  (constant (+CL-DBL-MIN-EXP+ "CL_DBL_MIN_EXP"))
  (constant (+CL-DBL-RADIX+ "CL_DBL_RADIX"))
  (constant (+CL-DBL-MAX+ "CL_DBL_MAX")
            :type double-float)
  (constant (+CL-DBL-MIN+ "CL_DBL_MIN")
            :type double-float)
  (constant (+CL-DBL-EPSILON+ "CL_DBL_EPSILON")
            :type double-float)
  (constant (+CL-M-E+ "CL_M_E")
            :type double-float)
  (constant (+CL-M-LOG2E+ "CL_M_LOG2E")
            :type double-float)
  (constant (+CL-M-LOG10E+ "CL_M_LOG10E")
            :type double-float)
  (constant (+CL-M-LN2+ "CL_M_LN2")
            :type double-float)
  (constant (+CL-M-LN10+ "CL_M_LN10")
            :type double-float)
  (constant (+CL-M-PI+ "CL_M_PI")
            :type double-float)
  (constant (+CL-M-PI-2+ "CL_M_PI_2")
            :type double-float)
  (constant (+CL-M-PI-4+ "CL_M_PI_4")
            :type double-float)
  (constant (+CL-M-1-PI+ "CL_M_1_PI")
            :type double-float)
  (constant (+CL-M-2-PI+ "CL_M_2_PI")
            :type double-float)
  (constant (+CL-M-2-SQRTPI+ "CL_M_2_SQRTPI")
            :type double-float)
  (constant (+CL-M-SQRT2+ "CL_M_SQRT2")
            :type double-float)
  (constant (+CL-M-SQRT1-2+ "CL_M_SQRT1_2")
            :type double-float)
  (constant (+CL-M-E-F+ "CL_M_E_F")
            :type double-float)
  (constant (+CL-M-LOG2E-F+ "CL_M_LOG2E_F")
            :type double-float)
  (constant (+CL-M-LOG10E-F+ "CL_M_LOG10E_F")
            :type double-float)
  (constant (+CL-M-LN2-F+ "CL_M_LN2_F")
            :type double-float)
  (constant (+CL-M-LN10-F+ "CL_M_LN10_F")
            :type double-float)
  (constant (+CL-M-PI-F+ "CL_M_PI_F")
            :type double-float)
  (constant (+CL-M-PI-2-F+ "CL_M_PI_2_F")
            :type double-float)
  (constant (+CL-M-PI-4-F+ "CL_M_PI_4_F")
            :type double-float)
  (constant (+CL-M-1-PI-F+ "CL_M_1_PI_F")
            :type double-float)
  (constant (+CL-M-2-PI-F+ "CL_M_2_PI_F")
            :type double-float)
  (constant (+CL-M-2-SQRTPI-F+ "CL_M_2_SQRTPI_F")
            :type double-float)
  (constant (+CL-M-SQRT2-F+ "CL_M_SQRT2_F")
            :type double-float)
  (constant (+CL-M-SQRT1-2-F+ "CL_M_SQRT1_2_F")
            :type double-float)
  ;; The commented values below are problems for the groveler likely
  ;; due to C printing "inf" or "nan" for infinity/not-a-number, which
  ;; means the groveler doesn't know how to intrepret them into the
  ;; Lisp-specific representations.

  ;; (constant (+CL-HUGE-VALF+ "CL_HUGE_VALF")
  ;;           :type double-float)
  ;; (constant (+CL-HUGE-VAL+ "CL_HUGE_VAL")
  ;;           :type double-float)
  ;; (constant (+CL-NAN+ "CL_NAN")
  ;;           :type double-float)
  (constant (+CL-MAXFLOAT+ "CL_MAXFLOAT")
            :type double-float)
  ;; (constant (+CL-INFINITY+ "CL_INFINITY")
  ;;           :type double-float)
  )
;; OpenGL mirror types
(progn
  (ctype cl-gl-uint "cl_GLuint")
  (ctype cl-gl-int "cl_GLint")
  (ctype cl-gl-enum "cl_GLenum"))
;;; Vector types
(progn
  (PROGN
    (CUNION CL-CHAR2 "cl_char2" (S "s" :TYPE CL-CHAR :COUNT 2))
    (CUNION CL-CHAR4 "cl_char4" (S "s" :TYPE CL-CHAR :COUNT 4))
    (CUNION CL-CHAR8 "cl_char8" (S "s" :TYPE CL-CHAR :COUNT 8))
    (CUNION CL-CHAR16 "cl_char16" (S "s" :TYPE CL-CHAR :COUNT 16)))
  (PROGN
    (CUNION CL-UCHAR2 "cl_uchar2" (S "s" :TYPE CL-UCHAR :COUNT 2))
    (CUNION CL-UCHAR4 "cl_uchar4" (S "s" :TYPE CL-UCHAR :COUNT 4))
    (CUNION CL-UCHAR8 "cl_uchar8" (S "s" :TYPE CL-UCHAR :COUNT 8))
    (CUNION CL-UCHAR16 "cl_uchar16" (S "s" :TYPE CL-UCHAR :COUNT 16)))
  (PROGN
    (CUNION CL-SHORT2 "cl_short2" (S "s" :TYPE CL-SHORT :COUNT 2))
    (CUNION CL-SHORT4 "cl_short4" (S "s" :TYPE CL-SHORT :COUNT 4))
    (CUNION CL-SHORT8 "cl_short8" (S "s" :TYPE CL-SHORT :COUNT 8))
    (CUNION CL-SHORT16 "cl_short16" (S "s" :TYPE CL-SHORT :COUNT 16)))
  (PROGN
    (CUNION CL-USHORT2 "cl_ushort2" (S "s" :TYPE CL-USHORT :COUNT 2))
    (CUNION CL-USHORT4 "cl_ushort4" (S "s" :TYPE CL-USHORT :COUNT 4))
    (CUNION CL-USHORT8 "cl_ushort8" (S "s" :TYPE CL-USHORT :COUNT 8))
    (CUNION CL-USHORT16 "cl_ushort16" (S "s" :TYPE CL-USHORT :COUNT 16)))
  ;; not sure why but half vector types are causing problems for grovel
  ;;
  ;;   (PROGN
  ;;   (CUNION CL-HALF2 "cl_half2" (S "s" :TYPE CL-HALF :COUNT 2))
  ;;   (CUNION CL-HALF4 "cl_half4" (S "s" :TYPE CL-HALF :COUNT 4))
  ;;   (CUNION CL-HALF8 "cl_half8" (S "s" :TYPE CL-HALF :COUNT 8))
  ;;   (CUNION CL-HALF16 "cl_half16" (S "s" :TYPE CL-HALF :COUNT 16)))
  ;; (PROGN
  ;;   (CUNION CL-UHALF2 "cl_uhalf2" (S "s" :TYPE CL-UHALF :COUNT 2))
  ;;   (CUNION CL-UHALF4 "cl_uhalf4" (S "s" :TYPE CL-UHALF :COUNT 4))
  ;;   (CUNION CL-UHALF8 "cl_uhalf8" (S "s" :TYPE CL-UHALF :COUNT 8))
  ;;   (CUNION CL-UHALF16 "cl_uhalf16" (S "s" :TYPE CL-UHALF :COUNT 16)))
  (PROGN
    (CUNION CL-INT2 "cl_int2" (S "s" :TYPE CL-INT :COUNT 2))
    (CUNION CL-INT4 "cl_int4" (S "s" :TYPE CL-INT :COUNT 4))
    (CUNION CL-INT8 "cl_int8" (S "s" :TYPE CL-INT :COUNT 8))
    (CUNION CL-INT16 "cl_int16" (S "s" :TYPE CL-INT :COUNT 16)))
  (PROGN
    (CUNION CL-UINT2 "cl_uint2" (S "s" :TYPE CL-UINT :COUNT 2))
    (CUNION CL-UINT4 "cl_uint4" (S "s" :TYPE CL-UINT :COUNT 4))
    (CUNION CL-UINT8 "cl_uint8" (S "s" :TYPE CL-UINT :COUNT 8))
    (CUNION CL-UINT16 "cl_uint16" (S "s" :TYPE CL-UINT :COUNT 16)))
  (PROGN
    (CUNION CL-LONG2 "cl_long2" (S "s" :TYPE CL-LONG :COUNT 2))
    (CUNION CL-LONG4 "cl_long4" (S "s" :TYPE CL-LONG :COUNT 4))
    (CUNION CL-LONG8 "cl_long8" (S "s" :TYPE CL-LONG :COUNT 8))
    (CUNION CL-LONG16 "cl_long16" (S "s" :TYPE CL-LONG :COUNT 16)))
  (PROGN
    (CUNION CL-ULONG2 "cl_ulong2" (S "s" :TYPE CL-ULONG :COUNT 2))
    (CUNION CL-ULONG4 "cl_ulong4" (S "s" :TYPE CL-ULONG :COUNT 4))
    (CUNION CL-ULONG8 "cl_ulong8" (S "s" :TYPE CL-ULONG :COUNT 8))
    (CUNION CL-ULONG16 "cl_ulong16" (S "s" :TYPE CL-ULONG :COUNT 16)))
  (PROGN
    (CUNION CL-FLOAT2 "cl_float2" (S "s" :TYPE CL-FLOAT :COUNT 2))
    (CUNION CL-FLOAT4 "cl_float4" (S "s" :TYPE CL-FLOAT :COUNT 4))
    (CUNION CL-FLOAT8 "cl_float8" (S "s" :TYPE CL-FLOAT :COUNT 8))
    (CUNION CL-FLOAT16 "cl_float16" (S "s" :TYPE CL-FLOAT :COUNT 16)))
  (PROGN
    (CUNION CL-DOUBLE2 "cl_double2" (S "s" :TYPE CL-DOUBLE :COUNT 2))
    (CUNION CL-DOUBLE4 "cl_double4" (S "s" :TYPE CL-DOUBLE :COUNT 4))
    (CUNION CL-DOUBLE8 "cl_double8" (S "s" :TYPE CL-DOUBLE :COUNT 8))
    (CUNION CL-DOUBLE16 "cl_double16" (S "s" :TYPE CL-DOUBLE :COUNT 16))))

;; device types
(constant (+CL-DEVICE-TYPE-DEFAULT+ "CL_DEVICE_TYPE_DEFAULT"))
(constant (+CL-DEVICE-TYPE-CPU+ "CL_DEVICE_TYPE_CPU"))
(constant (+CL-DEVICE-TYPE-GPU+ "CL_DEVICE_TYPE_GPU"))
(constant (+CL-DEVICE-TYPE-ACCELERATOR+ "CL_DEVICE_TYPE_ACCELERATOR"))
(constant (+CL-DEVICE-TYPE-CUSTOM+ "CL_DEVICE_TYPE_CUSTOM"))
(constant (+CL-DEVICE-TYPE-ALL+ "CL_DEVICE_TYPE_ALL"))

;;; CL/cl_gl.h
;; types
(ctype cl-gl-object-type "cl_gl_object_type")
(ctype cl-gl-texture-info "cl_gl_texture_info")
(ctype cl-gl-platform-info "cl_gl_platform_info")
(ctype cl-gl-context-info "cl_gl_context_info")
(ctype cl-glsync "cl_GLsync")

;; constants
(progn
  (constant (+CL-GL-OBJECT-BUFFER+ "CL_GL_OBJECT_BUFFER"))
  (constant (+CL-GL-OBJECT-TEXTURE2D+ "CL_GL_OBJECT_TEXTURE2D"))
  (constant (+CL-GL-OBJECT-TEXTURE3D+ "CL_GL_OBJECT_TEXTURE3D"))
  (constant (+CL-GL-OBJECT-RENDERBUFFER+ "CL_GL_OBJECT_RENDERBUFFER"))
  (constant (+CL-GL-OBJECT-TEXTURE2D-ARRAY+ "CL_GL_OBJECT_TEXTURE2D_ARRAY"))
  (constant (+CL-GL-OBJECT-TEXTURE1D+ "CL_GL_OBJECT_TEXTURE1D"))
  (constant (+CL-GL-OBJECT-TEXTURE1D-ARRAY+ "CL_GL_OBJECT_TEXTURE1D_ARRAY"))
  (constant (+CL-GL-OBJECT-TEXTURE-BUFFER+ "CL_GL_OBJECT_TEXTURE_BUFFER"))
  (constant (+CL-GL-TEXTURE-TARGET+ "CL_GL_TEXTURE_TARGET"))
  (constant (+CL-GL-MIPMAP-LEVEL+ "CL_GL_MIPMAP_LEVEL"))
  (constant (+CL-GL-NUM-SAMPLES+ "CL_GL_NUM_SAMPLES"))
  (constant (+cl-khr-gl-sharing+ "cl_khr_gl_sharing"))
  (constant (+CL-INVALID-GL-SHAREGROUP-REFERENCE-KHR+ "CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR"))
  (constant (+CL-CURRENT-DEVICE-FOR-GL-CONTEXT-KHR+ "CL_CURRENT_DEVICE_FOR_GL_CONTEXT_KHR"))
  (constant (+CL-DEVICES-FOR-GL-CONTEXT-KHR+ "CL_DEVICES_FOR_GL_CONTEXT_KHR"))
  (constant (+CL-GL-CONTEXT-KHR+ "CL_GL_CONTEXT_KHR"))
  (constant (+CL-EGL-DISPLAY-KHR+ "CL_EGL_DISPLAY_KHR"))
  (constant (+CL-GLX-DISPLAY-KHR+ "CL_GLX_DISPLAY_KHR"))
  (constant (+CL-WGL-HDC-KHR+ "CL_WGL_HDC_KHR"))
  (constant (+CL-CGL-SHAREGROUP-KHR+ "CL_CGL_SHAREGROUP_KHR")))

;;; CL/cl_gl_ext.h
(constant (+CL-COMMAND-GL-FENCE-SYNC-OBJECT-KHR+
           "CL_COMMAND_GL_FENCE_SYNC_OBJECT_KHR"))

;;; CL/cl_ext.h

(progn
  (constant (+CL-DEVICE-DOUBLE-FP-CONFIG+ "CL_DEVICE_DOUBLE_FP_CONFIG"))
  (constant (+CL-DEVICE-HALF-FP-CONFIG+ "CL_DEVICE_HALF_FP_CONFIG"))
  (constant (+cl-APPLE-SetMemObjectDestructor+ "cl_APPLE_SetMemObjectDestructor"))
  (constant (+cl-APPLE-ContextLoggingFunctions+ "cl_APPLE_ContextLoggingFunctions"))
  (constant (+cl-khr-icd+ "cl_khr_icd"))
  (constant (+CL-PLATFORM-ICD-SUFFIX-KHR+ "CL_PLATFORM_ICD_SUFFIX_KHR"))
  (constant (+CL-PLATFORM-NOT-FOUND-KHR+ "CL_PLATFORM_NOT_FOUND_KHR"))
  (constant (+cl-khr-il-program+ "cl_khr_il_program"))
  (constant (+CL-DEVICE-IL-VERSION-KHR+ "CL_DEVICE_IL_VERSION_KHR"))
  (constant (+CL-PROGRAM-IL-KHR+ "CL_PROGRAM_IL_KHR"))
  (constant (+CL-DEVICE-IMAGE-PITCH-ALIGNMENT-KHR+ "CL_DEVICE_IMAGE_PITCH_ALIGNMENT_KHR"))
  (constant (+CL-DEVICE-IMAGE-BASE-ADDRESS-ALIGNMENT-KHR+ "CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT_KHR"))
  (constant (+CL-CONTEXT-MEMORY-INITIALIZE-KHR+ "CL_CONTEXT_MEMORY_INITIALIZE_KHR"))
  (constant (+CL-CONTEXT-TERMINATED-KHR+ "CL_CONTEXT_TERMINATED_KHR"))
  (constant (+CL-DEVICE-TERMINATE-CAPABILITY-KHR+ "CL_DEVICE_TERMINATE_CAPABILITY_KHR"))
  (constant (+CL-CONTEXT-TERMINATE-KHR+ "CL_CONTEXT_TERMINATE_KHR"))
  (constant (+cl-khr-terminate-context+ "cl_khr_terminate_context"))
  (constant (+CL-DEVICE-SPIR-VERSIONS+ "CL_DEVICE_SPIR_VERSIONS"))
  (constant (+CL-PROGRAM-BINARY-TYPE-INTERMEDIATE+ "CL_PROGRAM_BINARY_TYPE_INTERMEDIATE"))
  (constant (+cl-khr-create-command-queue+ "cl_khr_create_command_queue"))
  (constant (+CL-DEVICE-COMPUTE-CAPABILITY-MAJOR-NV+ "CL_DEVICE_COMPUTE_CAPABILITY_MAJOR_NV"))
  (constant (+CL-DEVICE-COMPUTE-CAPABILITY-MINOR-NV+ "CL_DEVICE_COMPUTE_CAPABILITY_MINOR_NV"))
  (constant (+CL-DEVICE-REGISTERS-PER-BLOCK-NV+ "CL_DEVICE_REGISTERS_PER_BLOCK_NV"))
  (constant (+CL-DEVICE-WARP-SIZE-NV+ "CL_DEVICE_WARP_SIZE_NV"))
  (constant (+CL-DEVICE-GPU-OVERLAP-NV+ "CL_DEVICE_GPU_OVERLAP_NV"))
  (constant (+CL-DEVICE-KERNEL-EXEC-TIMEOUT-NV+ "CL_DEVICE_KERNEL_EXEC_TIMEOUT_NV"))
  (constant (+CL-DEVICE-INTEGRATED-MEMORY-NV+ "CL_DEVICE_INTEGRATED_MEMORY_NV"))
  (constant (+CL-DEVICE-PROFILING-TIMER-OFFSET-AMD+ "CL_DEVICE_PROFILING_TIMER_OFFSET_AMD"))
  (constant (+CL-PRINTF-CALLBACK-ARM+ "CL_PRINTF_CALLBACK_ARM"))
  (constant (+CL-PRINTF-BUFFERSIZE-ARM+ "CL_PRINTF_BUFFERSIZE_ARM"))
  (constant (+cl-ext-device-fission+ "cl_ext_device_fission"))
  (constant (+CL-DEVICE-PARTITION-EQUALLY-EXT+ "CL_DEVICE_PARTITION_EQUALLY_EXT"))
  (constant (+CL-DEVICE-PARTITION-BY-COUNTS-EXT+ "CL_DEVICE_PARTITION_BY_COUNTS_EXT"))
  (constant (+CL-DEVICE-PARTITION-BY-NAMES-EXT+ "CL_DEVICE_PARTITION_BY_NAMES_EXT"))
  (constant (+CL-DEVICE-PARTITION-BY-AFFINITY-DOMAIN-EXT+ "CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN_EXT"))
  (constant (+CL-DEVICE-PARENT-DEVICE-EXT+ "CL_DEVICE_PARENT_DEVICE_EXT"))
  (constant (+CL-DEVICE-PARTITION-TYPES-EXT+ "CL_DEVICE_PARTITION_TYPES_EXT"))
  (constant (+CL-DEVICE-AFFINITY-DOMAINS-EXT+ "CL_DEVICE_AFFINITY_DOMAINS_EXT"))
  (constant (+CL-DEVICE-REFERENCE-COUNT-EXT+ "CL_DEVICE_REFERENCE_COUNT_EXT"))
  (constant (+CL-DEVICE-PARTITION-STYLE-EXT+ "CL_DEVICE_PARTITION_STYLE_EXT"))
  (constant (+CL-DEVICE-PARTITION-FAILED-EXT+ "CL_DEVICE_PARTITION_FAILED_EXT"))
  (constant (+CL-INVALID-PARTITION-COUNT-EXT+ "CL_INVALID_PARTITION_COUNT_EXT"))
  (constant (+CL-INVALID-PARTITION-NAME-EXT+ "CL_INVALID_PARTITION_NAME_EXT"))
  (constant (+CL-AFFINITY-DOMAIN-L1-CACHE-EXT+ "CL_AFFINITY_DOMAIN_L1_CACHE_EXT"))
  (constant (+CL-AFFINITY-DOMAIN-L2-CACHE-EXT+ "CL_AFFINITY_DOMAIN_L2_CACHE_EXT"))
  (constant (+CL-AFFINITY-DOMAIN-L3-CACHE-EXT+ "CL_AFFINITY_DOMAIN_L3_CACHE_EXT"))
  (constant (+CL-AFFINITY-DOMAIN-L4-CACHE-EXT+ "CL_AFFINITY_DOMAIN_L4_CACHE_EXT"))
  (constant (+CL-AFFINITY-DOMAIN-NUMA-EXT+ "CL_AFFINITY_DOMAIN_NUMA_EXT"))
  (constant (+CL-AFFINITY-DOMAIN-NEXT-FISSIONABLE-EXT+ "CL_AFFINITY_DOMAIN_NEXT_FISSIONABLE_EXT"))
  (constant (+CL-PROPERTIES-LIST-END-EXT+ "CL_PROPERTIES_LIST_END_EXT"))
  (constant (+CL-PARTITION-BY-COUNTS-LIST-END-EXT+ "CL_PARTITION_BY_COUNTS_LIST_END_EXT"))
  (constant (+CL-PARTITION-BY-NAMES-LIST-END-EXT+ "CL_PARTITION_BY_NAMES_LIST_END_EXT"))
  (constant (+cl-ext-migrate-memobject+ "cl_ext_migrate_memobject"))
  (constant (+CL-MIGRATE-MEM-OBJECT-HOST-EXT+ "CL_MIGRATE_MEM_OBJECT_HOST_EXT"))
  (constant (+CL-COMMAND-MIGRATE-MEM-OBJECT-EXT+ "CL_COMMAND_MIGRATE_MEM_OBJECT_EXT"))
  (constant (+cl-qcom-ext-host-ptr+ "cl_qcom_ext_host_ptr"))
  (constant (+CL-MEM-EXT-HOST-PTR-QCOM+ "CL_MEM_EXT_HOST_PTR_QCOM"))
  (constant (+CL-DEVICE-EXT-MEM-PADDING-IN-BYTES-QCOM+ "CL_DEVICE_EXT_MEM_PADDING_IN_BYTES_QCOM"))
  (constant (+CL-DEVICE-PAGE-SIZE-QCOM+ "CL_DEVICE_PAGE_SIZE_QCOM"))
  (constant (+CL-IMAGE-ROW-ALIGNMENT-QCOM+ "CL_IMAGE_ROW_ALIGNMENT_QCOM"))
  (constant (+CL-IMAGE-SLICE-ALIGNMENT-QCOM+ "CL_IMAGE_SLICE_ALIGNMENT_QCOM"))
  (constant (+CL-MEM-HOST-UNCACHED-QCOM+ "CL_MEM_HOST_UNCACHED_QCOM"))
  (constant (+CL-MEM-HOST-WRITEBACK-QCOM+ "CL_MEM_HOST_WRITEBACK_QCOM"))
  (constant (+CL-MEM-HOST-WRITETHROUGH-QCOM+ "CL_MEM_HOST_WRITETHROUGH_QCOM"))
  (constant (+CL-MEM-HOST-WRITE-COMBINING-QCOM+ "CL_MEM_HOST_WRITE_COMBINING_QCOM"))
  (constant (+CL-MEM-HOST-IOCOHERENT-QCOM+ "CL_MEM_HOST_IOCOHERENT_QCOM"))
  (constant (+CL-MEM-ION-HOST-PTR-QCOM+ "CL_MEM_ION_HOST_PTR_QCOM"))
  (constant (+CL-MEM-ANDROID-NATIVE-BUFFER-HOST-PTR-QCOM+ "CL_MEM_ANDROID_NATIVE_BUFFER_HOST_PTR_QCOM"))
  (constant (+CL-NV21-IMG+ "CL_NV21_IMG"))
  (constant (+CL-YV12-IMG+ "CL_YV12_IMG"))
  (constant (+CL-MEM-USE-UNCACHED-CPU-MEMORY-IMG+ "CL_MEM_USE_UNCACHED_CPU_MEMORY_IMG"))
  (constant (+CL-MEM-USE-CACHED-CPU-MEMORY-IMG+ "CL_MEM_USE_CACHED_CPU_MEMORY_IMG"))
  (constant (+cl-img-use-gralloc-ptr+ "cl_img_use_gralloc_ptr"))
  (constant (+CL-MEM-USE-GRALLOC-PTR-IMG+ "CL_MEM_USE_GRALLOC_PTR_IMG"))
  (constant (+CL-COMMAND-ACQUIRE-GRALLOC-OBJECTS-IMG+ "CL_COMMAND_ACQUIRE_GRALLOC_OBJECTS_IMG"))
  (constant (+CL-COMMAND-RELEASE-GRALLOC-OBJECTS-IMG+ "CL_COMMAND_RELEASE_GRALLOC_OBJECTS_IMG"))
  (constant (+CL-GRALLOC-RESOURCE-NOT-ACQUIRED-IMG+ "CL_GRALLOC_RESOURCE_NOT_ACQUIRED_IMG"))
  (constant (+cl-khr-subgroups+ "cl_khr_subgroups"))
  (constant (+CL-KERNEL-MAX-SUB-GROUP-SIZE-FOR-NDRANGE-KHR+ "CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE_KHR"))
  (constant (+CL-KERNEL-SUB-GROUP-COUNT-FOR-NDRANGE-KHR+ "CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE_KHR"))
  (constant (+CL-SAMPLER-MIP-FILTER-MODE-KHR+ "CL_SAMPLER_MIP_FILTER_MODE_KHR"))
  (constant (+CL-SAMPLER-LOD-MIN-KHR+ "CL_SAMPLER_LOD_MIN_KHR"))
  (constant (+CL-SAMPLER-LOD-MAX-KHR+ "CL_SAMPLER_LOD_MAX_KHR"))
  (constant (+cl-khr-priority-hints+ "cl_khr_priority_hints"))
  (constant (+CL-QUEUE-PRIORITY-KHR+ "CL_QUEUE_PRIORITY_KHR"))
  (constant (+CL-QUEUE-PRIORITY-HIGH-KHR+ "CL_QUEUE_PRIORITY_HIGH_KHR"))
  (constant (+CL-QUEUE-PRIORITY-MED-KHR+ "CL_QUEUE_PRIORITY_MED_KHR"))
  (constant (+CL-QUEUE-PRIORITY-LOW-KHR+ "CL_QUEUE_PRIORITY_LOW_KHR"))
  (constant (+cl-khr-throttle-hints+ "cl_khr_throttle_hints"))
  (constant (+CL-QUEUE-THROTTLE-KHR+ "CL_QUEUE_THROTTLE_KHR"))
  (constant (+CL-QUEUE-THROTTLE-HIGH-KHR+ "CL_QUEUE_THROTTLE_HIGH_KHR"))
  (constant (+CL-QUEUE-THROTTLE-MED-KHR+ "CL_QUEUE_THROTTLE_MED_KHR"))
  (constant (+CL-QUEUE-THROTTLE-LOW-KHR+ "CL_QUEUE_THROTTLE_LOW_KHR"))
  (constant (+cl-khr-subgroup-named-barrier+ "cl_khr_subgroup_named_barrier"))
  (constant (+CL-DEVICE-MAX-NAMED-BARRIER-COUNT-KHR+ "CL_DEVICE_MAX_NAMED_BARRIER_COUNT_KHR"))
  (constant (+cl-khr-extended-versioning+ "cl_khr_extended_versioning"))
  (constant (+CL-VERSION-MAJOR-BITS-KHR+ "CL_VERSION_MAJOR_BITS_KHR"))
  (constant (+CL-VERSION-MINOR-BITS-KHR+ "CL_VERSION_MINOR_BITS_KHR"))
  (constant (+CL-VERSION-PATCH-BITS-KHR+ "CL_VERSION_PATCH_BITS_KHR"))
  (constant (+CL-VERSION-MAJOR-MASK-KHR+ "CL_VERSION_MAJOR_MASK_KHR"))
  (constant (+CL-VERSION-MINOR-MASK-KHR+ "CL_VERSION_MINOR_MASK_KHR"))
  (constant (+CL-VERSION-PATCH-MASK-KHR+ "CL_VERSION_PATCH_MASK_KHR"))
  (constant (+CL-NAME-VERSION-MAX-NAME-SIZE-KHR+ "CL_NAME_VERSION_MAX_NAME_SIZE_KHR"))
  (constant (+CL-PLATFORM-NUMERIC-VERSION-KHR+ "CL_PLATFORM_NUMERIC_VERSION_KHR"))
  (constant (+CL-PLATFORM-EXTENSIONS-WITH-VERSION-KHR+ "CL_PLATFORM_EXTENSIONS_WITH_VERSION_KHR"))
  (constant (+CL-DEVICE-NUMERIC-VERSION-KHR+ "CL_DEVICE_NUMERIC_VERSION_KHR"))
  (constant (+CL-DEVICE-OPENCL-C-NUMERIC-VERSION-KHR+ "CL_DEVICE_OPENCL_C_NUMERIC_VERSION_KHR"))
  (constant (+CL-DEVICE-EXTENSIONS-WITH-VERSION-KHR+ "CL_DEVICE_EXTENSIONS_WITH_VERSION_KHR"))
  (constant (+CL-DEVICE-ILS-WITH-VERSION-KHR+ "CL_DEVICE_ILS_WITH_VERSION_KHR"))
  (constant (+CL-DEVICE-BUILT-IN-KERNELS-WITH-VERSION-KHR+ "CL_DEVICE_BUILT_IN_KERNELS_WITH_VERSION_KHR"))
  (constant (+cl-arm-import-memory+ "cl_arm_import_memory"))
  (constant (+CL-IMPORT-TYPE-ARM+ "CL_IMPORT_TYPE_ARM"))
  (constant (+CL-IMPORT-TYPE-HOST-ARM+ "CL_IMPORT_TYPE_HOST_ARM"))
  (constant (+CL-IMPORT-TYPE-DMA-BUF-ARM+ "CL_IMPORT_TYPE_DMA_BUF_ARM"))
  (constant (+CL-IMPORT-TYPE-PROTECTED-ARM+ "CL_IMPORT_TYPE_PROTECTED_ARM"))
  (constant (+CL-IMPORT-TYPE-ANDROID-HARDWARE-BUFFER-ARM+ "CL_IMPORT_TYPE_ANDROID_HARDWARE_BUFFER_ARM"))
  (constant (+CL-IMPORT-DMA-BUF-DATA-CONSISTENCY-WITH-HOST-ARM+ "CL_IMPORT_DMA_BUF_DATA_CONSISTENCY_WITH_HOST_ARM"))
  (constant (+CL-IMPORT-MEMORY-WHOLE-ALLOCATION-ARM+ "CL_IMPORT_MEMORY_WHOLE_ALLOCATION_ARM"))
  (constant (+cl-arm-shared-virtual-memory+ "cl_arm_shared_virtual_memory"))
  (constant (+CL-DEVICE-SVM-CAPABILITIES-ARM+ "CL_DEVICE_SVM_CAPABILITIES_ARM"))
  (constant (+CL-MEM-USES-SVM-POINTER-ARM+ "CL_MEM_USES_SVM_POINTER_ARM"))
  (constant (+CL-KERNEL-EXEC-INFO-SVM-PTRS-ARM+ "CL_KERNEL_EXEC_INFO_SVM_PTRS_ARM"))
  (constant (+CL-KERNEL-EXEC-INFO-SVM-FINE-GRAIN-SYSTEM-ARM+ "CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM_ARM"))
  (constant (+CL-COMMAND-SVM-FREE-ARM+ "CL_COMMAND_SVM_FREE_ARM"))
  (constant (+CL-COMMAND-SVM-MEMCPY-ARM+ "CL_COMMAND_SVM_MEMCPY_ARM"))
  (constant (+CL-COMMAND-SVM-MEMFILL-ARM+ "CL_COMMAND_SVM_MEMFILL_ARM"))
  (constant (+CL-COMMAND-SVM-MAP-ARM+ "CL_COMMAND_SVM_MAP_ARM"))
  (constant (+CL-COMMAND-SVM-UNMAP-ARM+ "CL_COMMAND_SVM_UNMAP_ARM"))
  (constant (+CL-DEVICE-SVM-COARSE-GRAIN-BUFFER-ARM+ "CL_DEVICE_SVM_COARSE_GRAIN_BUFFER_ARM"))
  (constant (+CL-DEVICE-SVM-FINE-GRAIN-BUFFER-ARM+ "CL_DEVICE_SVM_FINE_GRAIN_BUFFER_ARM"))
  (constant (+CL-DEVICE-SVM-FINE-GRAIN-SYSTEM-ARM+ "CL_DEVICE_SVM_FINE_GRAIN_SYSTEM_ARM"))
  (constant (+CL-DEVICE-SVM-ATOMICS-ARM+ "CL_DEVICE_SVM_ATOMICS_ARM"))
  (constant (+CL-MEM-SVM-FINE-GRAIN-BUFFER-ARM+ "CL_MEM_SVM_FINE_GRAIN_BUFFER_ARM"))
  (constant (+CL-MEM-SVM-ATOMICS-ARM+ "CL_MEM_SVM_ATOMICS_ARM"))
  (constant (+cl-arm-get-core-id+ "cl_arm_get_core_id"))
  (constant (+CL-DEVICE-COMPUTE-UNITS-BITFIELD-ARM+ "CL_DEVICE_COMPUTE_UNITS_BITFIELD_ARM"))
  (constant (+cl-arm-job-slot-selection+ "cl_arm_job_slot_selection"))
  (constant (+CL-DEVICE-JOB-SLOTS-ARM+ "CL_DEVICE_JOB_SLOTS_ARM"))
  (constant (+CL-QUEUE-JOB-SLOT-ARM+ "CL_QUEUE_JOB_SLOT_ARM")))

(ctype cl-queue-properties-khr
       "cl_queue_properties_khr")
(ctype cl-mem-migration-flags-ext
       "cl_mem_migration_flags_ext")
(ctype cl-image-pitch-info-qcom
       "cl_image_pitch_info_qcom")
(ctype cl-queue-priority-khr
       "cl_queue_priority_khr")
(ctype cl-queue-throttle-khr
       "cl_queue_throttle_khr")
(ctype cl-version-khr
       "cl_version_khr")
(ctype cl-import-properties-arm
       "cl_import_properties_arm")
(ctype cl-svm-mem-flags-arm
       "cl_svm_mem_flags_arm")
(ctype cl-kernel-exec-info-arm
       "cl_kernel_exec_info_arm")
(ctype cl-device-svm-capabilities-arm
       "cl_device_svm_capabilities_arm")

(cstruct cl-mem-ext-host-ptr "cl_mem_ext_host_ptr"
         (allocation-type "allocation_type"
                          :type cl-uint)
         (host-cache-policy "host_cache_policy"
                            :type cl-uint))

(cstruct cl-mem-ion-host-ptr "cl_mem_ion_host_ptr"
         (ext-host-ptr "ext_host_ptr"
                       :type cl-mem-ext-host-ptr)
         (ion-filedesc "ion_filedesc"
                       :type :int)
         (ion-hostptr "ion_hostptr"
                      :type :pointer))

(cstruct cl-mem-android-native-buffer-host-ptr
         "cl_mem_android_native_buffer_host_ptr"
         (ext-host-ptr "ext_host_ptr"
                       :type cl-mem-ext-host-ptr)
         (anb-ptr "anb_ptr"
                  :type :pointer))

(cstruct cl-name-version-khr
         "cl_name_version_khr"
         (version "version"
                  :type cl-version-khr)
         (name "name"
               :type :char
               :count "CL_NAME_VERSION_MAX_NAME_SIZE_KHR"))
